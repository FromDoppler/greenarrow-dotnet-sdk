using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace GreenArrow.Engine.Model
{
    /// <summary>
    /// Represent a email message to delivery
    /// </summary>
    [JsonObject(NamingStrategyType = typeof(SnakeCaseNamingStrategy), ItemNullValueHandling = NullValueHandling.Ignore)]
    public class Message
    {
        /// <summary>
        /// Extra identifier for the message. 
        /// This value is returned in the response in order to assist in mapping specific messages to responses. 
        /// It is not otherwise used. It is not the same as the Message-ID header.
        /// </summary>
        public string Id { get; set; }

        /// <summary>
        /// HTML version of the content for the email message. Either the html or text key is required. Both may be specified.
        /// </summary>
        public string Html { get; set; }

        /// <summary>
        /// Text version of the content for the email message. Either the html or text key is required. Both may be specified.
        /// </summary>
        public string Text { get; set; }

        /// <summary>
        /// AMP for Email version of the content for the email message.
        /// This cannot be the only part of the email (i.e. you must specify html and/or text in addition to amp_html).
        /// <see href="https://amp.dev/documentation/guides-and-tutorials/learn/email-spec/amp-email-format"/>
        /// </summary>
        public string AmpHtml { get; set; }

        /// <summary>
        /// Subject line of the email.
        /// </summary>
        [Required]
        public string Subject { get; set; }

        /// <summary>
        /// List of To recipients
        /// </summary>
        public IList<Recipient> To { get; set; }

        /// <summary>
        /// List of CC recipients
        /// </summary>
        public IList<Recipient> Cc { get; set; }

        /// <summary>
        /// List of BCC recipients. Each entry in the array is a recipient’s email address.
        /// </summary>
        public IList<string> Bcc { get; set; }

        /// <summary>
        /// Email address to use in From header.
        /// </summary>
        [Required]
        public string FromEmail { get; set; }

        /// <summary>
        /// Name to use in From header.
        /// </summary>
        public string FromName { get; set; }

        /// <summary>
        /// Return-Path to use. This is also known as the bounce address and envelope sender.
        /// Note that this gets overwritten if SimpleMH is configured to set the Return-Path for you.
        /// </summary>
        public string ReturnPath { get; set; }

        /// <summary>
        /// Name of the SimpleMH Mail Class to use. This key has the same effect as the X-GreenArrow-MailClass header.
        /// </summary>
        public string MailClass { get; set; }

        /// <summary>
        /// Fully qualified domain name to use in the domain portion of the Message-ID header generated by GreenArrow.
        /// This is typically the hostname of the system that generated the message. 
        /// The domain listed in /var/hvmail/control/me is used by default. 
        /// If the message that you inject already has a Message-ID header set, then it is left intact.
        /// </summary>
        public string MessageIdDomain { get; set; }

        /// <summary>
        /// Headers to add to the email. The key is the header name and the value is the raw text of the value of the header.
        /// If either the Message-ID or Date headers are not provided, this API will automatically add these headers to the message.
        /// The automatic Date header takes the form:
        /// <code>Date: 18 Feb 2021 14:52:52 -0000</code>
        /// The automatic Message-ID header takes the form:
        /// <code>Message-ID: &lt;mid-0123456789abcdef0123456789abcdef@domain.com&gt;</code>
        /// </summary>
        /// <remarks>
        /// See the message_id_domain field above for more information on how this domain can be set. 
        /// When providing your own Message-ID, be sure to include the angled brackets around the value. 
        /// This is the required format of the Message-ID header as defined in RFC 5322.
        /// </remarks>
        public IDictionary<string, string> Headers { get; set; }

        /// <summary>
        /// Attachments to add to the message. Each element in the array is an object consisting of:
        /// </summary>
        public ICollection<Attachment> Attachments { get; set; }
    }
}
